#!/bin/bash

# Launch On Los (LOL) - Production Setup Script
# This script sets up the complete development and production environment

set -e

echo "ðŸš€ Launch On Los (LOL) - Production Setup"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Node.js is installed
check_node() {
    print_status "Checking Node.js installation..."
    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed. Please install Node.js 18+ first."
        exit 1
    fi
    
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        print_error "Node.js version 18+ is required. Current version: $(node --version)"
        exit 1
    fi
    
    print_success "Node.js $(node --version) is installed"
}

# Check if Yarn is installed
check_yarn() {
    print_status "Checking Yarn installation..."
    if ! command -v yarn &> /dev/null; then
        print_error "Yarn is not installed. Please install Yarn first."
        exit 1
    fi
    
    print_success "Yarn $(yarn --version) is installed"
}

# Create .env file from template
create_env() {
    print_status "Creating .env file from template..."
    
    if [ ! -f .env ]; then
        cat > .env << EOF
# Launch On Los (LOL) - Environment Configuration
# Generated by setup script on $(date)

# =============================================================================
# BLOCKCHAIN CONFIGURATION
# =============================================================================
RPC_URL=https://rpc.analos.io/
EXPLORER_URL=https://explorer.analos.io/
CHAIN_ID=analos

# =============================================================================
# WALLET CONFIGURATION
# =============================================================================
WALLET_PRIVATE_KEY=your_deployer_wallet_private_key_here
FEE_WALLET=your_fee_collection_wallet_here

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================
BUNDLR_NETWORK_URL=https://node1.bundlr.network
ARWEAVE_WALLET_PRIVATE_KEY=your_arweave_wallet_private_key_base64_encoded

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
PORT=3001
NODE_ENV=development
CORS_ORIGIN=http://localhost:3000

# =============================================================================
# RATE LIMITING
# =============================================================================
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# FILE UPLOAD CONFIGURATION
# =============================================================================
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=image/png,image/jpeg,image/gif,image/webp

# =============================================================================
# COLLECTION SETTINGS
# =============================================================================
MAX_COLLECTION_SIZE=10000
MIN_MINT_PRICE=0.001
MAX_MINT_PRICE=10
DEFAULT_FEE_PERCENTAGE=2.5

# =============================================================================
# FEATURE FLAGS
# =============================================================================
ENABLE_WHITELIST=true
ENABLE_ROYALTIES=true
ENABLE_BURNING=true
ENABLE_UPDATES=true

# =============================================================================
# MARKETPLACE INTEGRATION
# =============================================================================
MAGIC_EDEN_API_KEY=your_magic_eden_api_key_here
TENSOR_API_KEY=your_tensor_api_key_here
OPENSEA_API_KEY=your_opensea_api_key_here

# =============================================================================
# NOTIFICATIONS
# =============================================================================
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your_webhook_url
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your_webhook_url

# =============================================================================
# MONITORING & ANALYTICS
# =============================================================================
SENTRY_DSN=https://your_sentry_dsn_here
GOOGLE_ANALYTICS_ID=GA-XXXXXXXXX

# =============================================================================
# SECURITY
# =============================================================================
JWT_SECRET=your_jwt_secret_here
ENCRYPTION_KEY=your_32_character_encryption_key_here

# =============================================================================
# LOGGING
# =============================================================================
LOG_LEVEL=info
LOG_FILE_PATH=./logs/app.log

# =============================================================================
# DEVELOPMENT
# =============================================================================
DEBUG=false
VERBOSE_LOGGING=false

# =============================================================================
# PRODUCTION DEPLOYMENT
# =============================================================================
NEXT_PUBLIC_APP_URL=https://launchonlos.com
BACKEND_URL=https://api.launchonlos.com
CDN_URL=https://cdn.launchonlos.com
EOF
        print_success ".env file created"
        print_warning "Please edit .env file and fill in your actual values"
    else
        print_warning ".env file already exists, skipping creation"
    fi
}

# Install dependencies
install_dependencies() {
    print_status "Installing dependencies..."
    
    # Install root dependencies
    print_status "Installing root dependencies..."
    yarn install --frozen-lockfile || yarn install
    
    # Install backend dependencies
    print_status "Installing backend dependencies..."
    cd backend
    yarn install --frozen-lockfile || yarn install
    cd ..
    
    # Install frontend dependencies
    print_status "Installing frontend dependencies..."
    cd frontend
    yarn install --frozen-lockfile || yarn install
    cd ..
    
    # Install contracts dependencies
    print_status "Installing contracts dependencies..."
    cd contracts
    yarn install --frozen-lockfile || yarn install
    cd ..
    
    print_success "All dependencies installed successfully"
}

# Create necessary directories
create_directories() {
    print_status "Creating necessary directories..."
    
    mkdir -p logs
    mkdir -p tmp/sessions
    mkdir -p tmp/mock-storage
    mkdir -p backend/logs
    mkdir -p frontend/public/images
    
    print_success "Directories created"
}

# Build the project
build_project() {
    print_status "Building the project..."
    
    # Build shared package
    print_status "Building shared package..."
    cd shared
    yarn build
    cd ..
    
    # Build backend
    print_status "Building backend..."
    cd backend
    yarn build
    cd ..
    
    # Build frontend
    print_status "Building frontend..."
    cd frontend
    yarn build
    cd ..
    
    print_success "Project built successfully"
}

# Run tests
run_tests() {
    print_status "Running tests..."
    
    # Run backend tests
    print_status "Running backend tests..."
    cd backend
    yarn test || print_warning "Some backend tests failed"
    cd ..
    
    # Run frontend tests
    print_status "Running frontend tests..."
    cd frontend
    yarn test || print_warning "Some frontend tests failed"
    cd ..
    
    print_success "Tests completed"
}

# Create start scripts
create_start_scripts() {
    print_status "Creating start scripts..."
    
    # Create start-all script
    cat > start-all.sh << 'EOF'
#!/bin/bash
echo "ðŸš€ Starting Launch On Los (LOL) - All Services"
echo "=============================================="

# Start backend in background
echo "Starting backend server..."
cd backend
yarn dev &
BACKEND_PID=$!
cd ..

# Wait a moment for backend to start
sleep 3

# Start frontend
echo "Starting frontend server..."
cd frontend
yarn dev &
FRONTEND_PID=$!
cd ..

echo "âœ… All services started!"
echo "Backend: http://localhost:3001"
echo "Frontend: http://localhost:3000"
echo ""
echo "Press Ctrl+C to stop all services"

# Wait for user to stop
wait
EOF

    chmod +x start-all.sh
    
    # Create Windows batch file
    cat > start-all.bat << 'EOF'
@echo off
echo ðŸš€ Starting Launch On Los (LOL) - All Services
echo ==============================================

echo Starting backend server...
start "LOL Backend Server" cmd /k "cd backend && yarn dev"

timeout /t 3 /nobreak >nul

echo Starting frontend server...
start "LOL Frontend Server" cmd /k "cd frontend && yarn dev"

echo âœ… All services started!
echo Backend: http://localhost:3001
echo Frontend: http://localhost:3000
echo.
echo Press any key to exit...
pause >nul
EOF

    print_success "Start scripts created"
}

# Main execution
main() {
    echo "Starting Launch On Los (LOL) setup..."
    echo ""
    
    check_node
    check_yarn
    create_env
    create_directories
    install_dependencies
    build_project
    run_tests
    create_start_scripts
    
    echo ""
    print_success "ðŸŽ‰ Setup completed successfully!"
    echo ""
    echo "Next steps:"
    echo "1. Edit .env file with your actual values"
    echo "2. Run './start-all.sh' (Linux/Mac) or 'start-all.bat' (Windows)"
    echo "3. Visit http://localhost:3000 to access the frontend"
    echo "4. Visit http://localhost:3001/health to check backend health"
    echo ""
    echo "For production deployment, see DEPLOYMENT.md"
}

# Run main function
main "$@"
